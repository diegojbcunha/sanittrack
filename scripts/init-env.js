#!/usr/bin/env node

/**
 * Script de inicializa√ß√£o do ambiente
 * Ajuda a configurar o arquivo .env com base no .env.example
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('üîß SanitTrack - Script de Inicializa√ß√£o do Ambiente');
console.log('==================================================\n');

// Verifica se o arquivo .env j√° existe
const envPath = path.join(__dirname, '..', '.env');
const envExamplePath = path.join(__dirname, '..', '.env.example');

if (fs.existsSync(envPath)) {
  console.log('‚úÖ Arquivo .env j√° existe. Nenhuma a√ß√£o necess√°ria.');
  process.exit(0);
}

// Copia o .env.example para .env se n√£o existir
if (fs.existsSync(envExamplePath)) {
  try {
    fs.copyFileSync(envExamplePath, envPath);
    console.log('‚úÖ Arquivo .env criado com base no .env.example');
    
    // Gera uma chave JWT segura
    const jwtSecret = crypto.randomBytes(32).toString('hex');
    console.log(`üîê Chave JWT gerada: ${jwtSecret.substring(0, 10)}... (mantenha em segredo)`);
    
    // L√™ o conte√∫do do arquivo .env
    let envContent = fs.readFileSync(envPath, 'utf8');
    
    // Substitui a chave JWT placeholder por uma chave segura
    envContent = envContent.replace(
      /JWT_SECRET=.*$/,
      `JWT_SECRET=${jwtSecret}`
    );
    
    // Escreve o conte√∫do atualizado
    fs.writeFileSync(envPath, envContent);
    
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Edite o arquivo .env com suas credenciais reais');
    console.log('2. Configure seu banco de dados PostgreSQL');
    console.log('3. Execute: npm run setup');
    console.log('4. Execute: npm run seed');
    console.log('5. Execute: npm run dev');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar o arquivo .env:', error.message);
    process.exit(1);
  }
} else {
  console.log('‚ùå Arquivo .env.example n√£o encontrado. Por favor, verifique a instala√ß√£o.');
  process.exit(1);
}

console.log('\n‚úÖ Ambiente inicializado com sucesso!');